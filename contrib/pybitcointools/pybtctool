#!/usr/bin/python
import sys, json, re
from bitcoin import *
MSG="""
### Listing of main commands:

* privkey_to_pubkey    : (privkey) -> pubkey
* privtopub            : (privkey) -> pubkey
* pubkey_to_address    : (pubkey) -> address
* pubtoaddr            : (pubkey) -> address
* privkey_to_address   : (privkey) -> address
* privtoaddr           : (privkey) -> address

* add                  : (key1, key2) -> key1 + key2 (works on privkeys or pubkeys)
* multiply             : (pubkey, privkey) -> returns pubkey * privkey

* ecdsa_sign           : (message, privkey) -> sig
* ecdsa_verify         : (message, sig, pubkey) -> True/False
* ecdsa_recover        : (message, sig) -> pubkey

* random_key           : () -> privkey
* random_electrum_seed : () -> electrum seed

* electrum_stretch     : (seed) -> secret exponent
* electrum_privkey     : (seed or secret exponent, i, type) -> privkey
* electrum_mpk         : (seed or secret exponent) -> master public key
* electrum_pubkey      : (seed or secexp or mpk) -> pubkey

* bip32_master_key     : (seed) -> bip32 master key
* bip32_ckd            : (private or public bip32 key, i) -> child key
* bip32_privtopub      : (private bip32 key) -> public bip32 key
* bip32_extract_key    : (private or public bip32_key) -> privkey or pubkey

* deserialize          : (hex or bin transaction) -> JSON tx
* serialize            : (JSON tx) -> hex or bin tx
* mktx                 : (inputs, outputs) -> tx
* mksend               : (inputs, outputs, change_addr, fee) -> tx
* sign                 : (tx, i, privkey) -> tx with index i signed with privkey
* multisign            : (tx, i, script, privkey) -> signature
* apply_multisignatures: (tx, i, script, sigs) -> tx with index i signed with sigs
* scriptaddr           : (script) -> P2SH address
* mk_multisig_script   : (pubkeys, k, n) -> k-of-n multisig script from pubkeys
* verify_tx_input      : (tx, i, script, sig, pub) -> True/False
* tx_hash              : (hex or bin tx) -> hash

* history              : (address1, address2, etc) -> outputs to those addresses
* unspent              : (address1, address2, etc) -> unspent outputs to those addresses
* fetchtx              : (txash) -> tx if present
* pushtx               : (hex or bin tx) -> tries to push to blockchain.info/pushtx

* access               : (json list/object, prop) -> desired property of that json object
* multiaccess          : (json list, prop) -> like access, but mapped across each list element
* slice                : (json list, start, end) -> given slice of the list
* count                : (json list) -> number of elements
* sum                  : (json list) -> sum of all values

"""
if len(sys.argv) == 1:
    print "pybtctool <command> <arg1> <arg2> ..."
    print MSG
else:
    cmd = sys.argv[2] if sys.argv[1][0] == '-' else sys.argv[1]
    if sys.argv[1] == '-s':
        args = re.findall(r'\S\S*',sys.stdin.read())+sys.argv[3:]
    elif sys.argv[1] == '-B':
        args = [sys.stdin.read()]+sys.argv[3:]
    elif sys.argv[1] == '-b':
        args = [sys.stdin.read()[:-1]]+sys.argv[3:] # remove trailing \n
    elif sys.argv[1] == '-j':
        args = [json.loads(sys.stdin.read())]+sys.argv[3:]
    elif sys.argv[1] == '-J':
        args = json.loads(sys.stdin.read())+sys.argv[3:]
    else:
        cmd = sys.argv[1]
        args = sys.argv[2:]
    o = vars()[cmd](*args)
    if isinstance(o,(list,dict)): print json.dumps(o)
    else: print o
